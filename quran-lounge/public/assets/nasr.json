import whisper
import json
from pathlib import Path
import re
import pyarabic.araby as araby
from difflib import SequenceMatcher
from transformers import pipeline
import torch
from pydub import AudioSegment
import os

def load_surah_json(surah_folder):
    """
    Loads all surah JSON files into a dictionary.
    """
    surah_data = {}
    for surah_file in Path(surah_folder).glob("*.json"):
        with open(surah_file, "r", encoding="utf-8") as f:
            surah = json.load(f)
            surah_data[surah["index"]] = surah
    return surah_data

def load_surah_order(surah_data):
    """
    Returns an ordered list of surah keys based on their index.
    """
    return sorted(surah_data.keys(), key=lambda k: int(k))

def get_surah_index(timestamp, surah_order, quran_data):
    """
    Determines the current surah index based on the timestamp.
    Assumes surahs are processed sequentially.
    """
    cumulative_verses = 0
    for idx, surah_key in enumerate(surah_order):
        surah = quran_data[surah_key]
        verse_count = len(surah["verse"])

        # Check if the timestamp fits within the range of the current surah
        if cumulative_verses <= timestamp < cumulative_verses + verse_count:
            return idx

        cumulative_verses += verse_count

    # Default to the last surah if timestamp exceeds total verses
    return len(surah_order) - 1

def clean_text(text):
    """
    Cleans transcribed text by removing non-Arabic characters, tashkeel, and unnecessary spaces.
    """
    text = araby.strip_tashkeel(text)  # Remove diacritics
    text = araby.strip_tatweel(text)  # Remove elongations
    text = re.sub(r'[^ุง-ู\s]', '', text)  # Retain only Arabic letters and spaces
    text = re.sub(r'\s+', ' ', text).strip()  # Remove extra spaces
    return text

def get_quran_texts(quran_data):
    """
    Extracts clean and diacritic texts from Quran JSON structure.
    """
    clean_texts = []
    diacritic_texts = []

    for surah in quran_data.values():
        for verse_key, verse_text in surah["verse"].items():
            diacritic_texts.append(verse_text)
            # Clean text by removing diacritics
            clean_texts.append(clean_text(verse_text))
    
    return clean_texts, diacritic_texts

def correct_transcription(transcription, quran_clean, quran_diacritic):
    """
    Matches transcribed text to Quranic references.
    """
    best_match = None
    best_similarity = 0.0
    best_diacritic = None

    for clean_verse, diacritic_verse in zip(quran_clean, quran_diacritic):
        similarity = SequenceMatcher(None, transcription, clean_verse).ratio()
        if similarity > best_similarity:
            best_similarity = similarity
            best_match = clean_verse
            best_diacritic = diacritic_verse

    if best_similarity > 0.85:  # Threshold for a good match
        return best_match, best_diacritic
    return "ERROR", "ERROR"

def whisper_segment_audio(file_path):
    """
    Segments audio into chunks with timestamps using OpenAI Whisper.
    """
    model = whisper.load_model("large")
    result = model.transcribe(file_path, task="transcribe", language="ar")
    return result["segments"]

def transcribe_with_tarteel(file_path, segments, tarteel_pipe, quran_clean, quran_diacritic):
    """
    Transcribes audio segments using tarteel-ai model and retains timestamps.
    """
    transcription_results = []
    audio = AudioSegment.from_file(file_path)

    for segment in segments:
        start_time = segment["start"]
        end_time = segment["end"]

        # Extract the audio chunk
        audio_chunk = audio[start_time * 1000:end_time * 1000]
        temp_file = "temp_chunk.wav"
        audio_chunk.export(temp_file, format="wav")

        # Transcribe with tarteel
        transcription_result = tarteel_pipe(temp_file)
        transcription_text = transcription_result["text"]
        cleaned_text = clean_text(transcription_text)

        # Correct transcription
        corrected_text, diacritic_text = correct_transcription(cleaned_text, quran_clean, quran_diacritic)

        # Append the result
        transcription_results.append({
            "start_time": start_time,
            "end_time": end_time,
            "transcribed_text": cleaned_text,
            "corrected_text": corrected_text,
            "diacritic_text": diacritic_text,
        })

        # Remove the temporary file
        os.remove(temp_file)

    return transcription_results

def load_transcription_model():
    """
    Loads the tarteel-ai/whisper-base-ar-quran model for transcription.
    """
    MODEL_NAME = "tarteel-ai/whisper-base-ar-quran"
    device = 0 if torch.cuda.is_available() else "cpu"
    pipe = pipeline(
        task="automatic-speech-recognition",
        model=MODEL_NAME,
        chunk_length_s=30,
        device=device,
    )
    return pipe

def main():
    # Load Quran data
    surah_folder = "surah"
    quran_data = load_surah_json(surah_folder)
    quran_clean, quran_diacritic = get_quran_texts(quran_data)

    # Load transcription model
    tarteel_pipe = load_transcription_model()

    # Specify directory of audio files
    audio_dir = Path("recitations")
    audio_files = sorted(audio_dir.glob("*.wav"))

    if not audio_files:
        print("No audio files found in the directory!")
        return

    for file in audio_files:
        print(f"Processing file: {file}")
        
        # Use Whisper to segment audio
        segments = whisper_segment_audio(file)

        # Transcribe with Tarteel
        transcriptions = transcribe_with_tarteel(file, segments, tarteel_pipe, quran_clean, quran_diacritic)

        # Save results to JSON
        output_file = file.with_suffix(".json")
        with open(output_file, "w", encoding="utf-8") as f:
            json.dump(transcriptions, f, ensure_ascii=False, indent=4)
        print(f"Saved transcription to {output_file}")

if __name__ == "__main__":
    main()
